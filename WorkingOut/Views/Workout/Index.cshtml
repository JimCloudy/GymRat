@model Dictionary<string, IEnumerable<WorkingOut.Models.CalendarViewModel>>

@{
    ViewBag.Title = "My Workouts";
    int thisMonth = DateTime.Now.Month;
    int thisYear = DateTime.Now.Year;
    int thisDay = DateTime.Now.Day;
    DateTime firstOfMonth = new DateTime(thisYear, thisMonth, 1);
    int startDay = (int)firstOfMonth.DayOfWeek;
    int monthDays = DateTime.DaysInMonth(thisYear, thisMonth);
    int cell = 0;
    int dayOfMonth = 1;
}

<div class="darkHeadingDiv">
    <div id="prevMonth">
        <div>
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
        </div>
    </div>
    <div id="date_div">
        <div id="date_info">
            <h2>@firstOfMonth.ToString("MMMM") @firstOfMonth.Year</h2>
            <input type="hidden" id="dateMonth" value="@(firstOfMonth.Month - 1)"/>
            <input type="hidden" id="dateYear" value="@firstOfMonth.Year" />
        </div>
        <div id="date_input">
            <div id="date_selects">
                @Html.DropDownList("select_month", (IEnumerable<SelectListItem>)ViewBag.Months, htmlAttributes: new { @class = "form-control" })
                <select id="select_year" class="form-control">
                    @{
                        for (int y = DateTime.Now.Year + 1; y >= 2000; y--)
                        {
                            <option value="@y" @(y == firstOfMonth.Year ? "selected" : "")>@y</option>
                        }
                    }
                </select>
            </div>
            <div id="date_buttons">
                <button type="button" class="btn btn-success" id="go">GO</button>
                <button type="button" class="btn btn-danger" id="cancel">Cancel</button>
                <button type="button" class="btn btn-warning" id="now">Now</button>
            </div>
        </div>
    </div>
    <div id="nextMonth">
        <div>
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
        </div>
    </div>
</div>

<table>
    <thead>
        <th>Sunday</th>
        <th>Monday</th>
        <th>Tuesday</th>
        <th>Wednesday</th>
        <th>Thursday</th>
        <th>Friday</th>
        <th>Saturday</th>
    </thead>
    <tbody>
        @{
            string weekClass = "";
            string dayClass = "";
            for (int x = 0; x < 6; x++) {
                weekClass = "weekShow";
                if (x == 5)
                {
                    if (dayOfMonth > monthDays)
                    {
                        weekClass = "weekHidden";
                    }
                }
        @:<tr class="@weekClass">
                for (int y = 0; y < 7; y++) {
                    dayClass = "dayNotActive";
                    
                    if (dayOfMonth <= monthDays)
                    {
                        if (cell >= startDay)
                        {
                            dayClass = "dayActive";
                        }
                    }
            @:<td class="@dayClass">
                @:<div class="dayNum">
                    if(dayOfMonth <= monthDays){
                        if(cell >= startDay){
                            @dayOfMonth; 
                        }
                    }
                @:</div>
                @:<div class="dayInfo">
                    if (dayOfMonth <= monthDays)
                    {
                        if (cell >= startDay)
                        {
                            string lookupDate = new DateTime(thisYear, thisMonth, dayOfMonth).ToShortDateString();
                            if (Model.ContainsKey(lookupDate))
                            {
                                List<WorkingOut.Models.CalendarViewModel> workouts = Model[lookupDate].ToList();
                                <p>You have @workouts.Count @((workouts.Count == 1) ? "workout" : "workouts")  on this day. </p>
                            }
                        }
                    }
                @:</div>
                @:<div class="dayAdd">
                    string addDate = "";
                    if (dayOfMonth <= monthDays)
                    {
                        if (cell >= startDay)
                        {
                            addDate = new DateTime(thisYear, thisMonth, dayOfMonth).ToShortDateString();
                            dayOfMonth++;
                        }
                    }
                    <button type="button" class="btn addToCalendar" add-date="@addDate"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span></button>
                @:</div>
            @:</td>
                    cell++;
                }
        @:</tr>
            }
        }
    </tbody>
</table>

<div id="workoutSelect" class="modal fade in" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                
                <h4>Workouts for <span id="pickworkoutdate"></span></h4>
            </div>
            <div class="modal-body">
                <h4>Choose A Workout To View/Edit</h4>
                <div id="pickworkoutlist"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>  

<script>
    var calendarEntries = @Html.Raw(Json.Encode(Model));
</script>

@section Scripts{
    @Scripts.Render("~/Scripts/coded/Calendar.js")
    @Scripts.Render("~/bundles/bootstrap")
}
@section Styles{
    @Styles.Render("~/Content/Calendar.css")
}


